import c from "node:path";
import S from "fast-glob";
const N = ".screen.vue";
function P(a, r = 0) {
  let e = 3735928559 ^ r, t = 1103547991 ^ r;
  for (let u = 0, d; u < a.length; u++)
    d = a.charCodeAt(u), e = Math.imul(e ^ d, 2654435761), t = Math.imul(t ^ d, 1597334677);
  return e = Math.imul(e ^ e >>> 16, 2246822507) ^ Math.imul(t ^ t >>> 13, 3266489909), t = Math.imul(t ^ t >>> 16, 2246822507) ^ Math.imul(e ^ e >>> 13, 3266489909), `f_${(4294967296 * (2097151 & t) + (e >>> 0)).toString(16)}`;
}
function h(a) {
  return a.replace(/\\/g, "/");
}
async function E(a) {
  const r = /* @__PURE__ */ new Map();
  if (a.screens === !1)
    return r;
  const { root: e, screens: t } = a, { namespaces: m, globNamespaces: u } = t, d = [];
  u && u.forEach(async (s) => {
    (await S(
      h(c.join(s, "/**/resources/screens")),
      { cwd: e, onlyDirectories: !0, absolute: !0 }
    )).forEach((i) => {
      d.push(h(c.join(i, `**/*${N}`)));
    });
  });
  for (const [s, l] of Object.entries(m))
    (Array.isArray(l) ? l : [l]).forEach((o) => {
      if (o.includes("*"))
        d.push(h(c.join(e, o)));
      else if (o.includes(":")) {
        const [g, p] = o.split(":"), f = c.resolve(e, g), b = s === "@" ? p : `${s}::${p}`;
        r.set(b, {
          absolutePath: h(`/${c.relative(e, f)}`),
          logicalName: b,
          obfuscatedId: P(b),
          namespace: s
        });
      } else {
        const g = c.resolve(e, o), p = c.basename(o, N), f = s === "@" ? p : `${s}::${p}`;
        r.set(f, {
          absolutePath: h(`/${c.relative(e, g)}`),
          logicalName: f,
          obfuscatedId: P(f),
          namespace: s
        });
      }
    });
  const n = await S(d, {
    cwd: e,
    onlyFiles: !0,
    absolute: !0,
    unique: !0
  });
  for (const s of n) {
    const l = h(s);
    let i = null, o = null;
    for (const [b, $] of Object.entries(m)) {
      const M = Array.isArray($) ? $ : [$];
      for (const v of M)
        if (v.includes("*")) {
          const A = v.split("*")[0];
          if (l.startsWith(h(c.join(e, A)))) {
            i = b, o = A;
            break;
          }
        }
      if (i) break;
    }
    if (!i || !o) continue;
    const p = l.substring(h(c.join(e, o)).length).replace(N, "").replace(/^\//, "").replace(/\//g, "."), f = i === "@" ? p : `${i}::${p}`;
    r.has(f) || r.set(f, {
      absolutePath: h(`/${c.relative(e, s)}`),
      logicalName: f,
      obfuscatedId: P(f),
      namespace: i
    });
  }
  return r;
}
function D(a) {
  const r = Array.from(a.values()).map((t) => `'${t.obfuscatedId}': () => import('${t.absolutePath}')`), e = Object.fromEntries(
    Array.from(a.values()).map((t) => [t.logicalName, t.obfuscatedId])
  );
  return `// Generated by Fictif. DO NOT EDIT.
export const screens = { ${r.join(`,
  `)} };
export const nameToId = ${JSON.stringify(e)};
`;
}
const y = "virtual:fictif-screens-data", I = "\0" + y;
function j(a) {
  if (!a.includes("<script setup")) return a;
  const r = /defineOptions\s*\(\s*{([\s\S]*?)}\s*\)/;
  return r.test(a) ? a.replace(r, (e, t) => /inheritAttrs\s*:/.test(t) ? e : `defineOptions({${t.trim().endsWith(",") ? `${t} inheritAttrs: false` : `${t}, inheritAttrs: false`}})`) : a.replace(
    /<script setup(.*?)>/,
    `<script setup$1>
defineOptions({ inheritAttrs: false });`
  );
}
function R(a = {}) {
  let r, e, t, m = null, u = !1;
  function d(n) {
    u || (m && clearTimeout(m), m = setTimeout(async () => {
      u = !0;
      try {
        e = await E(t);
        const s = n.moduleGraph.getModuleById(I);
        s && (n.moduleGraph.invalidateModule(s), n.ws.send({ type: "full-reload" }));
      } catch (s) {
        console.error("[Fictif] Failed to rebuild manifest:", s);
      } finally {
        u = !1;
      }
    }, 10));
  }
  return {
    name: "vite-plugin-fictif",
    enforce: "pre",
    api: { getManifest: () => e },
    config(n) {
      n.optimizeDeps ??= {}, n.optimizeDeps.exclude ??= [], n.optimizeDeps.exclude.includes(y) || n.optimizeDeps.exclude.push(y);
    },
    configResolved(n) {
      r = n;
      const s = r.root;
      let l;
      if (a.screens === !1)
        l = !1;
      else {
        let i;
        a.screens?.globNamespaces === !1 ? i = !1 : Array.isArray(a.screens?.globNamespaces) ? i = a.screens.globNamespaces : i = ["./vendor", "./packages", "./node_modules"], l = {
          namespaces: {
            "@": "resources/screens/**",
            ...a.screens?.namespaces
          },
          globNamespaces: i
        };
      }
      t = { root: s, screens: l };
    },
    configureServer(n) {
      const { watcher: s } = n, l = (o) => t.screens !== !1 && o.endsWith(".screen.vue"), i = (o) => {
        l(o) && (console.log(`[Fictif] Screen change detected: ${o}`), d(n));
      };
      s.on("add", i), s.on("unlink", i);
    },
    buildStart() {
      return E(t).then((n) => {
        e = n;
      });
    },
    resolveId(n) {
      if (n === y)
        return I;
    },
    load(n) {
      if (n === I)
        return D(e);
    },
    transform(n, s) {
      return s.includes("node_modules") || s.startsWith("\0") || !s.endsWith(".screen.vue") || !n.includes("<script setup") ? void 0 : { code: j(n), map: null };
    }
  };
}
export {
  R as default
};
